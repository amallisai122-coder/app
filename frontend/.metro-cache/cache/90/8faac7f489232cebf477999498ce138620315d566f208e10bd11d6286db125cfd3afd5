{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./Device.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":57},"end":{"line":2,"column":44,"index":101}}],"key":"x8dA+Oqh1iivvx03WEHujA7b658=","exportNames":["*"]}},{"name":"./ExpoDevice","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":102},"end":{"line":3,"column":38,"index":140}}],"key":"0fzk2E6Nr6o2GHNufKcTmV29N+Y=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"DeviceType\", {\n    enumerable: true,\n    get: function () {\n      return _Device.DeviceType;\n    }\n  });\n  exports.deviceYearClass = exports.deviceType = exports.deviceName = exports.designName = exports.brand = void 0;\n  exports.getDeviceTypeAsync = getDeviceTypeAsync;\n  exports.getMaxMemoryAsync = getMaxMemoryAsync;\n  exports.getPlatformFeaturesAsync = getPlatformFeaturesAsync;\n  exports.getUptimeAsync = getUptimeAsync;\n  exports.hasPlatformFeatureAsync = hasPlatformFeatureAsync;\n  exports.isDevice = void 0;\n  exports.isRootedExperimentalAsync = isRootedExperimentalAsync;\n  exports.isSideLoadingEnabledAsync = isSideLoadingEnabledAsync;\n  exports.totalMemory = exports.supportedCpuArchitectures = exports.productName = exports.platformApiLevel = exports.osVersion = exports.osName = exports.osInternalBuildId = exports.osBuildId = exports.osBuildFingerprint = exports.modelName = exports.modelId = exports.manufacturer = void 0;\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _Device = require(_dependencyMap[2], \"./Device.types\");\n  var _ExpoDevice = _interopRequireDefault(require(_dependencyMap[3], \"./ExpoDevice\"));\n  /**\n   * `true` if the app is running on a real device and `false` if running in a simulator or emulator.\n   * On web, this is always set to `true`.\n   */\n  const isDevice = exports.isDevice = _ExpoDevice.default ? _ExpoDevice.default.isDevice : true;\n  /**\n   * The device brand. The consumer-visible brand of the product/hardware. On web, this value is always `null`.\n   *\n   * @example\n   * ```js\n   * Device.brand; // Android: \"google\", \"xiaomi\"; iOS: \"Apple\"; web: null\n   * ```\n   * @platform android\n   * @platform ios\n   */\n  const brand = exports.brand = _ExpoDevice.default ? _ExpoDevice.default.brand : null;\n  /**\n   * The actual device manufacturer of the product or hardware. This value of this field may be `null` if it cannot be determined.\n   *\n   * To view difference between `brand` and `manufacturer` on Android see [official documentation](https://developer.android.com/reference/android/os/Build).\n   *\n   * @example\n   * ```js\n   * Device.manufacturer; // Android: \"Google\", \"xiaomi\"; iOS: \"Apple\"; web: \"Google\", null\n   * ```\n   */\n  const manufacturer = exports.manufacturer = _ExpoDevice.default ? _ExpoDevice.default.manufacturer : null;\n  /**\n   * The internal model ID of the device. This is useful for programmatically identifying the type of device and is not a human-friendly string.\n   * On web and Android, this value is always `null`.\n   *\n   * @example\n   * ```js\n   * Device.modelId; // iOS: \"iPhone7,2\"; Android: null; web: null\n   * ```\n   * @platform ios\n   */\n  const modelId = exports.modelId = _ExpoDevice.default ? _ExpoDevice.default.modelId || null : null;\n  /**\n   * The human-friendly name of the device model. This is the name that people would typically use to refer to the device rather than a programmatic model identifier.\n   * This value of this field may be `null` if it cannot be determined.\n   *\n   * @example\n   * ```js\n   * Device.modelName; // Android: \"Pixel 2\"; iOS: \"iPhone XS Max\"; web: \"iPhone\", null\n   * ```\n   */\n  const modelName = exports.modelName = _ExpoDevice.default ? _ExpoDevice.default.modelName : null;\n  /**\n   * The specific configuration or name of the industrial design. It represents the device's name when it was designed during manufacturing into mass production.\n   * On Android, it corresponds to [`Build.DEVICE`](https://developer.android.com/reference/android/os/Build#DEVICE). On web and iOS, this value is always `null`.\n   *\n   * @example\n   * ```js\n   * Device.designName; // Android: \"kminilte\"; iOS: null; web: null\n   * ```\n   * @platform android\n   */\n  const designName = exports.designName = _ExpoDevice.default ? _ExpoDevice.default.designName || null : null;\n  /**\n   * The device's overall product name chosen by the device implementer containing the development name or code name of the device.\n   * Corresponds to [`Build.PRODUCT`](https://developer.android.com/reference/android/os/Build#PRODUCT). On web and iOS, this value is always `null`.\n   *\n   * @example\n   * ```js\n   * Device.productName; // Android: \"kminiltexx\"; iOS: null; web: null\n   * ```\n   * @platform android\n   */\n  const productName = exports.productName = _ExpoDevice.default ? _ExpoDevice.default.productName || null : null;\n  /**\n   * The type of the device as a [`DeviceType`](#devicetype) enum value.\n   *\n   * On Android, for devices other than TVs, the device type is determined by the screen resolution (screen diagonal size), so the result may not be completely accurate.\n   * If the screen diagonal length is between 3\" and 6.9\", the method returns `DeviceType.PHONE`. For lengths between 7\" and 18\", the method returns `DeviceType.TABLET`.\n   * Otherwise, the method returns `DeviceType.UNKNOWN`.\n   *\n   * @example\n   * ```js\n   * Device.deviceType; // UNKNOWN, PHONE, TABLET, TV, DESKTOP\n   * ```\n   */\n  const deviceType = exports.deviceType = _ExpoDevice.default ? _ExpoDevice.default.deviceType : null;\n  /**\n   * The [device year class](https://github.com/facebook/device-year-class) of this device. On web, this value is always `null`.\n   */\n  const deviceYearClass = exports.deviceYearClass = _ExpoDevice.default ? _ExpoDevice.default.deviceYearClass : null;\n  /**\n   * The device's total memory, in bytes. This is the total memory accessible to the kernel, but not necessarily to a single app.\n   * This is basically the amount of RAM the device has, not including below-kernel fixed allocations like DMA buffers, RAM for the baseband CPU, etcâ€¦\n   * On web, this value is always `null`.\n   *\n   * @example\n   * ```js\n   * Device.totalMemory; // 17179869184\n   * ```\n   */\n  const totalMemory = exports.totalMemory = _ExpoDevice.default ? _ExpoDevice.default.totalMemory : null;\n  /**\n   * A list of supported processor architecture versions. The device expects the binaries it runs to be compiled for one of these architectures.\n   * This value is `null` if the supported architectures could not be determined, particularly on web.\n   *\n   * @example\n   * ```js\n   * Device.supportedCpuArchitectures; // ['arm64 v8', 'Intel x86-64h Haswell', 'arm64-v8a', 'armeabi-v7a\", 'armeabi']\n   * ```\n   */\n  const supportedCpuArchitectures = exports.supportedCpuArchitectures = _ExpoDevice.default ? _ExpoDevice.default.supportedCpuArchitectures : null;\n  /**\n   * The name of the OS running on the device.\n   *\n   * @example\n   * ```js\n   * Device.osName; // Android: \"Android\"; iOS: \"iOS\" or \"iPadOS\"; web: \"iOS\", \"Android\", \"Windows\"\n   * ```\n   */\n  const osName = exports.osName = _ExpoDevice.default ? _ExpoDevice.default.osName : null;\n  /**\n   * The human-readable OS version string. Note that the version string may not always contain three numbers separated by dots.\n   *\n   * @example\n   * ```js\n   * Device.osVersion; // Android: \"4.0.3\"; iOS: \"12.3.1\"; web: \"11.0\", \"8.1.0\"\n   * ```\n   */\n  const osVersion = exports.osVersion = _ExpoDevice.default ? _ExpoDevice.default.osVersion : null;\n  /**\n   * The build ID of the OS that more precisely identifies the version of the OS. On Android, this corresponds to `Build.DISPLAY` (not `Build.ID`)\n   * and currently is a string as described [here](https://source.android.com/setup/start/build-numbers). On iOS, this corresponds to `kern.osversion`\n   * and is the detailed OS version sometimes displayed next to the more human-readable version. On web, this value is always `null`.\n   *\n   * @example\n   * ```js\n   * Device.osBuildId; // Android: \"PSR1.180720.075\"; iOS: \"16F203\"; web: null\n   * ```\n   */\n  const osBuildId = exports.osBuildId = _ExpoDevice.default ? _ExpoDevice.default.osBuildId : null;\n  /**\n   * The internal build ID of the OS running on the device. On Android, this corresponds to `Build.ID`.\n   * On iOS, this is the same value as [`Device.osBuildId`](#deviceosbuildid). On web, this value is always `null`.\n   *\n   * @example\n   * ```js\n   * Device.osInternalBuildId; // Android: \"MMB29K\"; iOS: \"16F203\"; web: null,\n   * ```\n   */\n  const osInternalBuildId = exports.osInternalBuildId = _ExpoDevice.default ? _ExpoDevice.default.osInternalBuildId : null;\n  /**\n   * A string that uniquely identifies the build of the currently running system OS. On Android, it follows this template:\n   * - `$(BRAND)/$(PRODUCT)/$(DEVICE)/$(BOARD):$(VERSION.RELEASE)/$(ID)/$(VERSION.INCREMENTAL):$(TYPE)/\\$(TAGS)`\n   * On web and iOS, this value is always `null`.\n   *\n   * @example\n   * ```js\n   * Device.osBuildFingerprint;\n   * // Android: \"google/sdk_gphone_x86/generic_x86:9/PSR1.180720.075/5124027:user/release-keys\";\n   * // iOS: null; web: null\n   * ```\n   * @platform android\n   */\n  const osBuildFingerprint = exports.osBuildFingerprint = _ExpoDevice.default ? _ExpoDevice.default.osBuildFingerprint || null : null;\n  /**\n   * The Android SDK version of the software currently running on this hardware device. This value never changes while a device is booted,\n   * but it may increase when the hardware manufacturer provides an OS update. See [here](https://developer.android.com/reference/android/os/Build.VERSION_CODES.html)\n   * to see all possible version codes and corresponding versions. On iOS and web, this value is always `null`.\n   *\n   * @example\n   * ```js\n   * Device.platformApiLevel; // Android: 19; iOS: null; web: null\n   * ```\n   * @platform android\n   */\n  const platformApiLevel = exports.platformApiLevel = _ExpoDevice.default ? _ExpoDevice.default.platformApiLevel || null : null;\n  /**\n   * The human-readable name of the device, which may be set by the device's user. If the device name is unavailable, particularly on web, this value is `null`.\n   *\n   * > On iOS 16 and newer, this value will be set to generic \"iPhone\" until you add the correct entitlement, see [iOS Capabilities page](/build-reference/ios-capabilities)\n   * > to learn how to add one and check out [Apple documentation](https://developer.apple.com/documentation/uikit/uidevice/1620015-name#discussion)\n   * > for more details on this change.\n   *\n   * @example\n   * ```js\n   * Device.deviceName; // \"Vivian's iPhone XS\"\n   * ```\n   */\n  const deviceName = exports.deviceName = _ExpoDevice.default ? _ExpoDevice.default.deviceName : null;\n  /**\n   * Checks the type of the device as a [`DeviceType`](#devicetype) enum value.\n   *\n   * On Android, for devices other than TVs, the device type is determined by the screen resolution (screen diagonal size), so the result may not be completely accurate.\n   * If the screen diagonal length is between 3\" and 6.9\", the method returns `DeviceType.PHONE`. For lengths between 7\" and 18\", the method returns `DeviceType.TABLET`.\n   * Otherwise, the method returns `DeviceType.UNKNOWN`.\n   *\n   * @return Returns a promise that resolves to a [`DeviceType`](#devicetype) enum value.\n   * @example\n   * ```js\n   * await Device.getDeviceTypeAsync();\n   * // DeviceType.PHONE\n   * ```\n   */\n  async function getDeviceTypeAsync() {\n    if (!_ExpoDevice.default.getDeviceTypeAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-device', 'getDeviceTypeAsync');\n    }\n    return await _ExpoDevice.default.getDeviceTypeAsync();\n  }\n  /**\n   * Gets the uptime since the last reboot of the device, in milliseconds. Android devices do not count time spent in deep sleep.\n   * @return Returns a promise that resolves to a `number` that represents the milliseconds since last reboot.\n   * @example\n   * ```js\n   * await Device.getUptimeAsync();\n   * // 4371054\n   * ```\n   * @platform android\n   * @platform ios\n   */\n  async function getUptimeAsync() {\n    if (!_ExpoDevice.default.getUptimeAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-device', 'getUptimeAsync');\n    }\n    return await _ExpoDevice.default.getUptimeAsync();\n  }\n  /**\n   * Returns the maximum amount of memory that the Java VM will attempt to use. If there is no inherent limit then `Number.MAX_SAFE_INTEGER` is returned.\n   * @return Returns a promise that resolves to the maximum available memory that the Java VM will use, in bytes.\n   * @example\n   * ```js\n   * await Device.getMaxMemoryAsync();\n   * // 402653184\n   * ```\n   * @platform android\n   */\n  async function getMaxMemoryAsync() {\n    if (!_ExpoDevice.default.getMaxMemoryAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-device', 'getMaxMemoryAsync');\n    }\n    let maxMemory = await _ExpoDevice.default.getMaxMemoryAsync();\n    if (maxMemory === -1) {\n      maxMemory = Number.MAX_SAFE_INTEGER;\n    }\n    return maxMemory;\n  }\n  /**\n   * > **warning** This method is experimental and is not completely reliable. See description below.\n   *\n   * Checks whether the device has been rooted (Android) or jailbroken (iOS). This is not completely reliable because there exist solutions to bypass root-detection\n   * on both [iOS](https://www.theiphonewiki.com/wiki/XCon) and [Android](https://tweakerlinks.com/how-to-bypass-apps-root-detection-in-android-device/).\n   * Further, many root-detection checks can be bypassed via reverse engineering.\n   * - On Android, it's implemented in a way to find all possible files paths that contain the `\"su\"` executable but some devices that are not rooted may also have this executable. Therefore, there's no guarantee that this method will always return correctly.\n   * - On iOS, [these jailbreak checks](https://www.theiphonewiki.com/wiki/Bypassing_Jailbreak_Detection) are used to detect if a device is rooted/jailbroken. However, since there are closed-sourced solutions such as [xCon](https://www.theiphonewiki.com/wiki/XCon) that aim to hook every known method and function responsible for informing an application of a jailbroken device, this method may not reliably detect devices that have xCon or similar packages installed.\n   * - On web, this always resolves to `false` even if the device is rooted.\n   * @return Returns a promise that resolves to a `boolean` that specifies whether this device is rooted.\n   * @example\n   * ```js\n   * await Device.isRootedExperimentalAsync();\n   * // true or false\n   * ```\n   */\n  async function isRootedExperimentalAsync() {\n    if (!_ExpoDevice.default.isRootedExperimentalAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-device', 'isRootedExperimentalAsync');\n    }\n    return await _ExpoDevice.default.isRootedExperimentalAsync();\n  }\n  /**\n   * **Using this method requires you to [add the `REQUEST_INSTALL_PACKAGES` permission](./../config/app/#permissions).**\n   * Returns whether applications can be installed for this user via the system's [`ACTION_INSTALL_PACKAGE`](https://developer.android.com/reference/android/content/Intent.html#ACTION_INSTALL_PACKAGE)\n   * mechanism rather than through the OS's default app store, like Google Play.\n   * @return Returns a promise that resolves to a `boolean` that represents whether the calling package is allowed to request package installation.\n   * @example\n   * ```js\n   * await Device.isSideLoadingEnabledAsync();\n   * // true or false\n   * ```\n   * @platform android\n   */\n  async function isSideLoadingEnabledAsync() {\n    if (!_ExpoDevice.default.isSideLoadingEnabledAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-device', 'isSideLoadingEnabledAsync');\n    }\n    return await _ExpoDevice.default.isSideLoadingEnabledAsync();\n  }\n  /**\n   * Gets a list of features that are available on the system. The feature names are platform-specific.\n   * See [Android documentation](<https://developer.android.com/reference/android/content/pm/PackageManager#getSystemAvailableFeatures()>)\n   * to learn more about this implementation.\n   * @return Returns a promise that resolves to an array of strings, each of which is a platform-specific name of a feature available on the current device.\n   * On iOS and web, the promise always resolves to an empty array.\n   * @example\n   * ```js\n   * await Device.getPlatformFeaturesAsync();\n   * // [\n   * //   'android.software.adoptable_storage',\n   * //   'android.software.backup',\n   * //   'android.hardware.sensor.accelerometer',\n   * //   'android.hardware.touchscreen',\n   * // ]\n   * ```\n   * @platform android\n   */\n  async function getPlatformFeaturesAsync() {\n    if (!_ExpoDevice.default.getPlatformFeaturesAsync) {\n      return [];\n    }\n    return await _ExpoDevice.default.getPlatformFeaturesAsync();\n  }\n  /**\n   * Tells if the device has a specific system feature.\n   * @param feature The platform-specific name of the feature to check for on the device. You can get all available system features with `Device.getSystemFeatureAsync()`.\n   * See [Android documentation](<https://developer.android.com/reference/android/content/pm/PackageManager#hasSystemFeature(java.lang.String)>) to view acceptable feature strings.\n   * @return Returns a promise that resolves to a boolean value indicating whether the device has the specified system feature.\n   * On iOS and web, the promise always resolves to `false`.\n   * @example\n   * ```js\n   * await Device.hasPlatformFeatureAsync('amazon.hardware.fire_tv');\n   * // true or false\n   * ```\n   * @platform android\n   */\n  async function hasPlatformFeatureAsync(feature) {\n    if (!_ExpoDevice.default.hasPlatformFeatureAsync) {\n      return false;\n    }\n    return await _ExpoDevice.default.hasPlatformFeatureAsync(feature);\n  }\n});","lineCount":351,"map":[[22,2,1,0],[22,6,1,0,"_expoModulesCore"],[22,22,1,0],[22,25,1,0,"require"],[22,32,1,0],[22,33,1,0,"_dependencyMap"],[22,47,1,0],[23,2,2,0],[23,6,2,0,"_Device"],[23,13,2,0],[23,16,2,0,"require"],[23,23,2,0],[23,24,2,0,"_dependencyMap"],[23,38,2,0],[24,2,3,0],[24,6,3,0,"_ExpoDevice"],[24,17,3,0],[24,20,3,0,"_interopRequireDefault"],[24,42,3,0],[24,43,3,0,"require"],[24,50,3,0],[24,51,3,0,"_dependencyMap"],[24,65,3,0],[25,2,5,0],[26,0,6,0],[27,0,7,0],[28,0,8,0],[29,2,9,7],[29,8,9,13,"isDevice"],[29,16,9,21],[29,19,9,21,"exports"],[29,26,9,21],[29,27,9,21,"isDevice"],[29,35,9,21],[29,38,9,24,"ExpoDevice"],[29,57,9,34],[29,60,9,37,"ExpoDevice"],[29,79,9,47],[29,80,9,48,"isDevice"],[29,88,9,56],[29,91,9,59],[29,95,9,63],[30,2,10,0],[31,0,11,0],[32,0,12,0],[33,0,13,0],[34,0,14,0],[35,0,15,0],[36,0,16,0],[37,0,17,0],[38,0,18,0],[39,0,19,0],[40,2,20,7],[40,8,20,13,"brand"],[40,13,20,18],[40,16,20,18,"exports"],[40,23,20,18],[40,24,20,18,"brand"],[40,29,20,18],[40,32,20,21,"ExpoDevice"],[40,51,20,31],[40,54,20,34,"ExpoDevice"],[40,73,20,44],[40,74,20,45,"brand"],[40,79,20,50],[40,82,20,53],[40,86,20,57],[41,2,21,0],[42,0,22,0],[43,0,23,0],[44,0,24,0],[45,0,25,0],[46,0,26,0],[47,0,27,0],[48,0,28,0],[49,0,29,0],[50,0,30,0],[51,2,31,7],[51,8,31,13,"manufacturer"],[51,20,31,25],[51,23,31,25,"exports"],[51,30,31,25],[51,31,31,25,"manufacturer"],[51,43,31,25],[51,46,31,28,"ExpoDevice"],[51,65,31,38],[51,68,31,41,"ExpoDevice"],[51,87,31,51],[51,88,31,52,"manufacturer"],[51,100,31,64],[51,103,31,67],[51,107,31,71],[52,2,32,0],[53,0,33,0],[54,0,34,0],[55,0,35,0],[56,0,36,0],[57,0,37,0],[58,0,38,0],[59,0,39,0],[60,0,40,0],[61,0,41,0],[62,2,42,7],[62,8,42,13,"modelId"],[62,15,42,20],[62,18,42,20,"exports"],[62,25,42,20],[62,26,42,20,"modelId"],[62,33,42,20],[62,36,42,23,"ExpoDevice"],[62,55,42,33],[62,58,42,36,"ExpoDevice"],[62,77,42,46],[62,78,42,47,"modelId"],[62,85,42,54],[62,89,42,58],[62,93,42,62],[62,96,42,65],[62,100,42,69],[63,2,43,0],[64,0,44,0],[65,0,45,0],[66,0,46,0],[67,0,47,0],[68,0,48,0],[69,0,49,0],[70,0,50,0],[71,0,51,0],[72,2,52,7],[72,8,52,13,"modelName"],[72,17,52,22],[72,20,52,22,"exports"],[72,27,52,22],[72,28,52,22,"modelName"],[72,37,52,22],[72,40,52,25,"ExpoDevice"],[72,59,52,35],[72,62,52,38,"ExpoDevice"],[72,81,52,48],[72,82,52,49,"modelName"],[72,91,52,58],[72,94,52,61],[72,98,52,65],[73,2,53,0],[74,0,54,0],[75,0,55,0],[76,0,56,0],[77,0,57,0],[78,0,58,0],[79,0,59,0],[80,0,60,0],[81,0,61,0],[82,0,62,0],[83,2,63,7],[83,8,63,13,"designName"],[83,18,63,23],[83,21,63,23,"exports"],[83,28,63,23],[83,29,63,23,"designName"],[83,39,63,23],[83,42,63,26,"ExpoDevice"],[83,61,63,36],[83,64,63,39,"ExpoDevice"],[83,83,63,49],[83,84,63,50,"designName"],[83,94,63,60],[83,98,63,64],[83,102,63,68],[83,105,63,71],[83,109,63,75],[84,2,64,0],[85,0,65,0],[86,0,66,0],[87,0,67,0],[88,0,68,0],[89,0,69,0],[90,0,70,0],[91,0,71,0],[92,0,72,0],[93,0,73,0],[94,2,74,7],[94,8,74,13,"productName"],[94,19,74,24],[94,22,74,24,"exports"],[94,29,74,24],[94,30,74,24,"productName"],[94,41,74,24],[94,44,74,27,"ExpoDevice"],[94,63,74,37],[94,66,74,40,"ExpoDevice"],[94,85,74,50],[94,86,74,51,"productName"],[94,97,74,62],[94,101,74,66],[94,105,74,70],[94,108,74,73],[94,112,74,77],[95,2,75,0],[96,0,76,0],[97,0,77,0],[98,0,78,0],[99,0,79,0],[100,0,80,0],[101,0,81,0],[102,0,82,0],[103,0,83,0],[104,0,84,0],[105,0,85,0],[106,0,86,0],[107,2,87,7],[107,8,87,13,"deviceType"],[107,18,87,23],[107,21,87,23,"exports"],[107,28,87,23],[107,29,87,23,"deviceType"],[107,39,87,23],[107,42,87,26,"ExpoDevice"],[107,61,87,36],[107,64,87,39,"ExpoDevice"],[107,83,87,49],[107,84,87,50,"deviceType"],[107,94,87,60],[107,97,87,63],[107,101,87,67],[108,2,88,0],[109,0,89,0],[110,0,90,0],[111,2,91,7],[111,8,91,13,"deviceYearClass"],[111,23,91,28],[111,26,91,28,"exports"],[111,33,91,28],[111,34,91,28,"deviceYearClass"],[111,49,91,28],[111,52,91,31,"ExpoDevice"],[111,71,91,41],[111,74,91,44,"ExpoDevice"],[111,93,91,54],[111,94,91,55,"deviceYearClass"],[111,109,91,70],[111,112,91,73],[111,116,91,77],[112,2,92,0],[113,0,93,0],[114,0,94,0],[115,0,95,0],[116,0,96,0],[117,0,97,0],[118,0,98,0],[119,0,99,0],[120,0,100,0],[121,0,101,0],[122,2,102,7],[122,8,102,13,"totalMemory"],[122,19,102,24],[122,22,102,24,"exports"],[122,29,102,24],[122,30,102,24,"totalMemory"],[122,41,102,24],[122,44,102,27,"ExpoDevice"],[122,63,102,37],[122,66,102,40,"ExpoDevice"],[122,85,102,50],[122,86,102,51,"totalMemory"],[122,97,102,62],[122,100,102,65],[122,104,102,69],[123,2,103,0],[124,0,104,0],[125,0,105,0],[126,0,106,0],[127,0,107,0],[128,0,108,0],[129,0,109,0],[130,0,110,0],[131,0,111,0],[132,2,112,7],[132,8,112,13,"supportedCpuArchitectures"],[132,33,112,38],[132,36,112,38,"exports"],[132,43,112,38],[132,44,112,38,"supportedCpuArchitectures"],[132,69,112,38],[132,72,112,41,"ExpoDevice"],[132,91,112,51],[132,94,113,6,"ExpoDevice"],[132,113,113,16],[132,114,113,17,"supportedCpuArchitectures"],[132,139,113,42],[132,142,114,6],[132,146,114,10],[133,2,115,0],[134,0,116,0],[135,0,117,0],[136,0,118,0],[137,0,119,0],[138,0,120,0],[139,0,121,0],[140,0,122,0],[141,2,123,7],[141,8,123,13,"osName"],[141,14,123,19],[141,17,123,19,"exports"],[141,24,123,19],[141,25,123,19,"osName"],[141,31,123,19],[141,34,123,22,"ExpoDevice"],[141,53,123,32],[141,56,123,35,"ExpoDevice"],[141,75,123,45],[141,76,123,46,"osName"],[141,82,123,52],[141,85,123,55],[141,89,123,59],[142,2,124,0],[143,0,125,0],[144,0,126,0],[145,0,127,0],[146,0,128,0],[147,0,129,0],[148,0,130,0],[149,0,131,0],[150,2,132,7],[150,8,132,13,"osVersion"],[150,17,132,22],[150,20,132,22,"exports"],[150,27,132,22],[150,28,132,22,"osVersion"],[150,37,132,22],[150,40,132,25,"ExpoDevice"],[150,59,132,35],[150,62,132,38,"ExpoDevice"],[150,81,132,48],[150,82,132,49,"osVersion"],[150,91,132,58],[150,94,132,61],[150,98,132,65],[151,2,133,0],[152,0,134,0],[153,0,135,0],[154,0,136,0],[155,0,137,0],[156,0,138,0],[157,0,139,0],[158,0,140,0],[159,0,141,0],[160,0,142,0],[161,2,143,7],[161,8,143,13,"osBuildId"],[161,17,143,22],[161,20,143,22,"exports"],[161,27,143,22],[161,28,143,22,"osBuildId"],[161,37,143,22],[161,40,143,25,"ExpoDevice"],[161,59,143,35],[161,62,143,38,"ExpoDevice"],[161,81,143,48],[161,82,143,49,"osBuildId"],[161,91,143,58],[161,94,143,61],[161,98,143,65],[162,2,144,0],[163,0,145,0],[164,0,146,0],[165,0,147,0],[166,0,148,0],[167,0,149,0],[168,0,150,0],[169,0,151,0],[170,0,152,0],[171,2,153,7],[171,8,153,13,"osInternalBuildId"],[171,25,153,30],[171,28,153,30,"exports"],[171,35,153,30],[171,36,153,30,"osInternalBuildId"],[171,53,153,30],[171,56,153,33,"ExpoDevice"],[171,75,153,43],[171,78,153,46,"ExpoDevice"],[171,97,153,56],[171,98,153,57,"osInternalBuildId"],[171,115,153,74],[171,118,153,77],[171,122,153,81],[172,2,154,0],[173,0,155,0],[174,0,156,0],[175,0,157,0],[176,0,158,0],[177,0,159,0],[178,0,160,0],[179,0,161,0],[180,0,162,0],[181,0,163,0],[182,0,164,0],[183,0,165,0],[184,0,166,0],[185,2,167,7],[185,8,167,13,"osBuildFingerprint"],[185,26,167,31],[185,29,167,31,"exports"],[185,36,167,31],[185,37,167,31,"osBuildFingerprint"],[185,55,167,31],[185,58,167,34,"ExpoDevice"],[185,77,167,44],[185,80,168,6,"ExpoDevice"],[185,99,168,16],[185,100,168,17,"osBuildFingerprint"],[185,118,168,35],[185,122,168,39],[185,126,168,43],[185,129,169,6],[185,133,169,10],[186,2,170,0],[187,0,171,0],[188,0,172,0],[189,0,173,0],[190,0,174,0],[191,0,175,0],[192,0,176,0],[193,0,177,0],[194,0,178,0],[195,0,179,0],[196,0,180,0],[197,2,181,7],[197,8,181,13,"platformApiLevel"],[197,24,181,29],[197,27,181,29,"exports"],[197,34,181,29],[197,35,181,29,"platformApiLevel"],[197,51,181,29],[197,54,181,32,"ExpoDevice"],[197,73,181,42],[197,76,182,6,"ExpoDevice"],[197,95,182,16],[197,96,182,17,"platformApiLevel"],[197,112,182,33],[197,116,182,37],[197,120,182,41],[197,123,183,6],[197,127,183,10],[198,2,184,0],[199,0,185,0],[200,0,186,0],[201,0,187,0],[202,0,188,0],[203,0,189,0],[204,0,190,0],[205,0,191,0],[206,0,192,0],[207,0,193,0],[208,0,194,0],[209,0,195,0],[210,2,196,7],[210,8,196,13,"deviceName"],[210,18,196,23],[210,21,196,23,"exports"],[210,28,196,23],[210,29,196,23,"deviceName"],[210,39,196,23],[210,42,196,26,"ExpoDevice"],[210,61,196,36],[210,64,196,39,"ExpoDevice"],[210,83,196,49],[210,84,196,50,"deviceName"],[210,94,196,60],[210,97,196,63],[210,101,196,67],[211,2,197,0],[212,0,198,0],[213,0,199,0],[214,0,200,0],[215,0,201,0],[216,0,202,0],[217,0,203,0],[218,0,204,0],[219,0,205,0],[220,0,206,0],[221,0,207,0],[222,0,208,0],[223,0,209,0],[224,0,210,0],[225,2,211,7],[225,17,211,22,"getDeviceTypeAsync"],[225,35,211,40,"getDeviceTypeAsync"],[225,36,211,40],[225,38,211,43],[226,4,212,4],[226,8,212,8],[226,9,212,9,"ExpoDevice"],[226,28,212,19],[226,29,212,20,"getDeviceTypeAsync"],[226,47,212,38],[226,49,212,40],[227,6,213,8],[227,12,213,14],[227,16,213,18,"UnavailabilityError"],[227,52,213,37],[227,53,213,38],[227,66,213,51],[227,68,213,53],[227,88,213,73],[227,89,213,74],[228,4,214,4],[229,4,215,4],[229,11,215,11],[229,17,215,17,"ExpoDevice"],[229,36,215,27],[229,37,215,28,"getDeviceTypeAsync"],[229,55,215,46],[229,56,215,47],[229,57,215,48],[230,2,216,0],[231,2,217,0],[232,0,218,0],[233,0,219,0],[234,0,220,0],[235,0,221,0],[236,0,222,0],[237,0,223,0],[238,0,224,0],[239,0,225,0],[240,0,226,0],[241,0,227,0],[242,2,228,7],[242,17,228,22,"getUptimeAsync"],[242,31,228,36,"getUptimeAsync"],[242,32,228,36],[242,34,228,39],[243,4,229,4],[243,8,229,8],[243,9,229,9,"ExpoDevice"],[243,28,229,19],[243,29,229,20,"getUptimeAsync"],[243,43,229,34],[243,45,229,36],[244,6,230,8],[244,12,230,14],[244,16,230,18,"UnavailabilityError"],[244,52,230,37],[244,53,230,38],[244,66,230,51],[244,68,230,53],[244,84,230,69],[244,85,230,70],[245,4,231,4],[246,4,232,4],[246,11,232,11],[246,17,232,17,"ExpoDevice"],[246,36,232,27],[246,37,232,28,"getUptimeAsync"],[246,51,232,42],[246,52,232,43],[246,53,232,44],[247,2,233,0],[248,2,234,0],[249,0,235,0],[250,0,236,0],[251,0,237,0],[252,0,238,0],[253,0,239,0],[254,0,240,0],[255,0,241,0],[256,0,242,0],[257,0,243,0],[258,2,244,7],[258,17,244,22,"getMaxMemoryAsync"],[258,34,244,39,"getMaxMemoryAsync"],[258,35,244,39],[258,37,244,42],[259,4,245,4],[259,8,245,8],[259,9,245,9,"ExpoDevice"],[259,28,245,19],[259,29,245,20,"getMaxMemoryAsync"],[259,46,245,37],[259,48,245,39],[260,6,246,8],[260,12,246,14],[260,16,246,18,"UnavailabilityError"],[260,52,246,37],[260,53,246,38],[260,66,246,51],[260,68,246,53],[260,87,246,72],[260,88,246,73],[261,4,247,4],[262,4,248,4],[262,8,248,8,"maxMemory"],[262,17,248,17],[262,20,248,20],[262,26,248,26,"ExpoDevice"],[262,45,248,36],[262,46,248,37,"getMaxMemoryAsync"],[262,63,248,54],[262,64,248,55],[262,65,248,56],[263,4,249,4],[263,8,249,8,"maxMemory"],[263,17,249,17],[263,22,249,22],[263,23,249,23],[263,24,249,24],[263,26,249,26],[264,6,250,8,"maxMemory"],[264,15,250,17],[264,18,250,20,"Number"],[264,24,250,26],[264,25,250,27,"MAX_SAFE_INTEGER"],[264,41,250,43],[265,4,251,4],[266,4,252,4],[266,11,252,11,"maxMemory"],[266,20,252,20],[267,2,253,0],[268,2,254,0],[269,0,255,0],[270,0,256,0],[271,0,257,0],[272,0,258,0],[273,0,259,0],[274,0,260,0],[275,0,261,0],[276,0,262,0],[277,0,263,0],[278,0,264,0],[279,0,265,0],[280,0,266,0],[281,0,267,0],[282,0,268,0],[283,0,269,0],[284,2,270,7],[284,17,270,22,"isRootedExperimentalAsync"],[284,42,270,47,"isRootedExperimentalAsync"],[284,43,270,47],[284,45,270,50],[285,4,271,4],[285,8,271,8],[285,9,271,9,"ExpoDevice"],[285,28,271,19],[285,29,271,20,"isRootedExperimentalAsync"],[285,54,271,45],[285,56,271,47],[286,6,272,8],[286,12,272,14],[286,16,272,18,"UnavailabilityError"],[286,52,272,37],[286,53,272,38],[286,66,272,51],[286,68,272,53],[286,95,272,80],[286,96,272,81],[287,4,273,4],[288,4,274,4],[288,11,274,11],[288,17,274,17,"ExpoDevice"],[288,36,274,27],[288,37,274,28,"isRootedExperimentalAsync"],[288,62,274,53],[288,63,274,54],[288,64,274,55],[289,2,275,0],[290,2,276,0],[291,0,277,0],[292,0,278,0],[293,0,279,0],[294,0,280,0],[295,0,281,0],[296,0,282,0],[297,0,283,0],[298,0,284,0],[299,0,285,0],[300,0,286,0],[301,0,287,0],[302,2,288,7],[302,17,288,22,"isSideLoadingEnabledAsync"],[302,42,288,47,"isSideLoadingEnabledAsync"],[302,43,288,47],[302,45,288,50],[303,4,289,4],[303,8,289,8],[303,9,289,9,"ExpoDevice"],[303,28,289,19],[303,29,289,20,"isSideLoadingEnabledAsync"],[303,54,289,45],[303,56,289,47],[304,6,290,8],[304,12,290,14],[304,16,290,18,"UnavailabilityError"],[304,52,290,37],[304,53,290,38],[304,66,290,51],[304,68,290,53],[304,95,290,80],[304,96,290,81],[305,4,291,4],[306,4,292,4],[306,11,292,11],[306,17,292,17,"ExpoDevice"],[306,36,292,27],[306,37,292,28,"isSideLoadingEnabledAsync"],[306,62,292,53],[306,63,292,54],[306,64,292,55],[307,2,293,0],[308,2,294,0],[309,0,295,0],[310,0,296,0],[311,0,297,0],[312,0,298,0],[313,0,299,0],[314,0,300,0],[315,0,301,0],[316,0,302,0],[317,0,303,0],[318,0,304,0],[319,0,305,0],[320,0,306,0],[321,0,307,0],[322,0,308,0],[323,0,309,0],[324,0,310,0],[325,0,311,0],[326,2,312,7],[326,17,312,22,"getPlatformFeaturesAsync"],[326,41,312,46,"getPlatformFeaturesAsync"],[326,42,312,46],[326,44,312,49],[327,4,313,4],[327,8,313,8],[327,9,313,9,"ExpoDevice"],[327,28,313,19],[327,29,313,20,"getPlatformFeaturesAsync"],[327,53,313,44],[327,55,313,46],[328,6,314,8],[328,13,314,15],[328,15,314,17],[329,4,315,4],[330,4,316,4],[330,11,316,11],[330,17,316,17,"ExpoDevice"],[330,36,316,27],[330,37,316,28,"getPlatformFeaturesAsync"],[330,61,316,52],[330,62,316,53],[330,63,316,54],[331,2,317,0],[332,2,318,0],[333,0,319,0],[334,0,320,0],[335,0,321,0],[336,0,322,0],[337,0,323,0],[338,0,324,0],[339,0,325,0],[340,0,326,0],[341,0,327,0],[342,0,328,0],[343,0,329,0],[344,0,330,0],[345,2,331,7],[345,17,331,22,"hasPlatformFeatureAsync"],[345,40,331,45,"hasPlatformFeatureAsync"],[345,41,331,46,"feature"],[345,48,331,53],[345,50,331,55],[346,4,332,4],[346,8,332,8],[346,9,332,9,"ExpoDevice"],[346,28,332,19],[346,29,332,20,"hasPlatformFeatureAsync"],[346,52,332,43],[346,54,332,45],[347,6,333,8],[347,13,333,15],[347,18,333,20],[348,4,334,4],[349,4,335,4],[349,11,335,11],[349,17,335,17,"ExpoDevice"],[349,36,335,27],[349,37,335,28,"hasPlatformFeatureAsync"],[349,60,335,51],[349,61,335,52,"feature"],[349,68,335,59],[349,69,335,60],[350,2,336,0],[351,0,336,1],[351,3]],"functionMap":{"names":["<global>","getDeviceTypeAsync","getUptimeAsync","getMaxMemoryAsync","isRootedExperimentalAsync","isSideLoadingEnabledAsync","getPlatformFeaturesAsync","hasPlatformFeatureAsync"],"mappings":"AAA;OCkN;CDK;OEY;CFK;OGW;CHS;OIiB;CJK;OKa;CLK;OMmB;CNK;OOc;CPK"}},"type":"js/module"}]}